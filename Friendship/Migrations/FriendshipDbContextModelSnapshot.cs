// <auto-generated />
using System;
using Friendship.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Friendship.Migrations
{
    [DbContext(typeof(FriendshipDbContext))]
    partial class FriendshipDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Friendship.Models.Block", b =>
                {
                    b.Property<string>("BlockId")
                        .HasColumnType("text");

                    b.Property<string>("BlockedUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BlockingUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("BlockId");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("BlockingUserId");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Friendship.Models.FriendRequest", b =>
                {
                    b.Property<string>("FriendRequestId")
                        .HasColumnType("text");

                    b.Property<string>("ReceiverUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestDateSend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("PENDING");

                    b.HasKey("FriendRequestId");

                    b.HasIndex("ReceiverUserId");

                    b.HasIndex("SenderUserId");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Friendship.Models.UsersFriendship", b =>
                {
                    b.Property<string>("FriendshipId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("FriendshipId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("UsersFriendships");
                });
#pragma warning restore 612, 618
        }
    }
}
